plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.resengkor'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	mapstructVersion = "1.6.0"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	//JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.5'

	//DB
	runtimeOnly 'com.mysql:mysql-connector-j'

	//유효성
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//이메일 인증
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	//핸드폰 인증
	implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'

	//redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// Map Struct
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	// If you are using mapstruct in test code
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	// uuid
	implementation group: 'net.glxn.qrgen', name: 'javase', version: '2.0'

	// Swagger (Springdoc OpenAPI)
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta" // 수정
	implementation "com.querydsl:querydsl-core"
	implementation "com.querydsl:querydsl-collections"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Test 환경에서 QueryDSL 세팅 : jakarta.persistence의 API 가용성 보장
//	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
}

tasks.named('test') {
	useJUnitPlatform()
}


//// QueryDSL 설정
//
//def querydslDir = 'src/main/generated'
//
//sourceSets {
//	main.java.srcDirs += querydslDir
//}
//tasks.withType(JavaCompile).configureEach {
//	options.annotationProcessorPath = configurations.annotationProcessor
//}
//clean {
//	delete querydslDir
//}

// Querydsl 설정부
//def generated = 'src/main/generated'
//
//// querydsl QClass 파일 생성 위치를 지정
//tasks.withType(JavaCompile) {
//	options.getGeneratedSourceOutputDirectory().set(file(generated))
//}
//
//// java source set 에 querydsl QClass 위치 추가
//sourceSets {
//	main.java.srcDirs += [ generated ]
//}
//
//// gradle clean 시에 QClass 디렉토리 삭제
//clean {
//	delete file(generated)
//}
///// Querydsl 빌드 옵션 (옵셔널)
def generated = 'src/main/generated'

///// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

///// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

///// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}